#pragma once

enum StreamlineMarkerType {
	STREAMLINE_MARKER_INITIALIZE_VULKAN,
	STREAMLINE_MARKER_INITIALIZE_D3D12,
	STREAMLINE_MARKER_BEFORE_MESSAGE_LOOP,
	STREAMLINE_MARKER_BEFORE_DEVICE_DESTROY,
	STREAMLINE_MARKER_AFTER_DEVICE_CREATION,
	STREAMLINE_MARKER_MODIFY_SWAPCHAIN,
	STREAMLINE_MARKER_BEGIN_SIMULATION,
	STREAMLINE_MARKER_END_SIMULATION,
	STREAMLINE_MARKER_BEGIN_RENDER,
	STREAMLINE_MARKER_END_RENDER,
	STREAMLINE_MARKER_BEGIN_PRESENT,
	STREAMLINE_MARKER_END_PRESENT,
	STREAMLINE_MARKER_PC_PING
};

enum StreamlineCapabilityType {
	STREAMLINE_CAPABILITY_DLSS,
	STREAMLINE_CAPABILITY_DLSS_G,
	STREAMLINE_CAPABILITY_REFLEX,
	STREAMLINE_CAPABILITY_PCL,
	STREAMLINE_CAPABILITY_NIS
};

enum StreamlineInternalParameterType {
	STREAMLINE_INTERNAL_PARAMETER_FUNC_D3D12GetInterface,
	STREAMLINE_INTERNAL_PARAMETER_FUNC_D3D12CreateDevice,
	STREAMLINE_INTERNAL_PARAMETER_FUNC_DXGIGetDebugInterface1,
	STREAMLINE_INTERNAL_PARAMETER_FUNC_CreateDXGIFactory,
	STREAMLINE_INTERNAL_PARAMETER_FUNC_CreateDXGIFactory1,
	STREAMLINE_INTERNAL_PARAMETER_FUNC_CreateDXGIFactory2,
};

struct StreamlineCapabilities {
	bool dlssAvailable = false;
	bool dlssGAvailable = false;
	bool reflexAvailable = false;
	bool pclAvailable = false;
	bool nisAvailable = false;
};

enum StreamlineParameterType {
	STREAMLINE_PARAM_REFLEX_MODE, // [double] 0.0 = off, 1.0 = on, 2.0 = on with boost
	STREAMLINE_PARAM_REFLEX_FRAME_LIMIT_US, // [double] frame limit in microseconds
	STREAMLINE_PARAM_DLSS_PRESET, // [string] DLSS preset. defaults to "" (default), but can be overridden to "J" or "K" for transformer models.
	STREAMLINE_PARAM_COUNT,
};
